// Code generated by mockery v2.46.3. DO NOT EDIT.

package models

import (
	mock "github.com/stretchr/testify/mock"
	models "gophkeeper.com/internal/server/models"
)

// Visitor is an autogenerated mock type for the Visitor type
type Visitor struct {
	mock.Mock
}

type Visitor_Expecter struct {
	mock *mock.Mock
}

func (_m *Visitor) EXPECT() *Visitor_Expecter {
	return &Visitor_Expecter{mock: &_m.Mock}
}

// VisitBinary provides a mock function with given fields: binary
func (_m *Visitor) VisitBinary(binary *models.Binary) error {
	ret := _m.Called(binary)

	if len(ret) == 0 {
		panic("no return value specified for VisitBinary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Binary) error); ok {
		r0 = rf(binary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Visitor_VisitBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitBinary'
type Visitor_VisitBinary_Call struct {
	*mock.Call
}

// VisitBinary is a helper method to define mock.On call
//   - binary *models.Binary
func (_e *Visitor_Expecter) VisitBinary(binary interface{}) *Visitor_VisitBinary_Call {
	return &Visitor_VisitBinary_Call{Call: _e.mock.On("VisitBinary", binary)}
}

func (_c *Visitor_VisitBinary_Call) Run(run func(binary *models.Binary)) *Visitor_VisitBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Binary))
	})
	return _c
}

func (_c *Visitor_VisitBinary_Call) Return(_a0 error) *Visitor_VisitBinary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Visitor_VisitBinary_Call) RunAndReturn(run func(*models.Binary) error) *Visitor_VisitBinary_Call {
	_c.Call.Return(run)
	return _c
}

// VisitCard provides a mock function with given fields: card
func (_m *Visitor) VisitCard(card *models.Card) error {
	ret := _m.Called(card)

	if len(ret) == 0 {
		panic("no return value specified for VisitCard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Card) error); ok {
		r0 = rf(card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Visitor_VisitCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitCard'
type Visitor_VisitCard_Call struct {
	*mock.Call
}

// VisitCard is a helper method to define mock.On call
//   - card *models.Card
func (_e *Visitor_Expecter) VisitCard(card interface{}) *Visitor_VisitCard_Call {
	return &Visitor_VisitCard_Call{Call: _e.mock.On("VisitCard", card)}
}

func (_c *Visitor_VisitCard_Call) Run(run func(card *models.Card)) *Visitor_VisitCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Card))
	})
	return _c
}

func (_c *Visitor_VisitCard_Call) Return(_a0 error) *Visitor_VisitCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Visitor_VisitCard_Call) RunAndReturn(run func(*models.Card) error) *Visitor_VisitCard_Call {
	_c.Call.Return(run)
	return _c
}

// VisitLogin provides a mock function with given fields: login
func (_m *Visitor) VisitLogin(login *models.Login) error {
	ret := _m.Called(login)

	if len(ret) == 0 {
		panic("no return value specified for VisitLogin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Login) error); ok {
		r0 = rf(login)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Visitor_VisitLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitLogin'
type Visitor_VisitLogin_Call struct {
	*mock.Call
}

// VisitLogin is a helper method to define mock.On call
//   - login *models.Login
func (_e *Visitor_Expecter) VisitLogin(login interface{}) *Visitor_VisitLogin_Call {
	return &Visitor_VisitLogin_Call{Call: _e.mock.On("VisitLogin", login)}
}

func (_c *Visitor_VisitLogin_Call) Run(run func(login *models.Login)) *Visitor_VisitLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Login))
	})
	return _c
}

func (_c *Visitor_VisitLogin_Call) Return(_a0 error) *Visitor_VisitLogin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Visitor_VisitLogin_Call) RunAndReturn(run func(*models.Login) error) *Visitor_VisitLogin_Call {
	_c.Call.Return(run)
	return _c
}

// VisitNote provides a mock function with given fields: note
func (_m *Visitor) VisitNote(note *models.Note) error {
	ret := _m.Called(note)

	if len(ret) == 0 {
		panic("no return value specified for VisitNote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Note) error); ok {
		r0 = rf(note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Visitor_VisitNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisitNote'
type Visitor_VisitNote_Call struct {
	*mock.Call
}

// VisitNote is a helper method to define mock.On call
//   - note *models.Note
func (_e *Visitor_Expecter) VisitNote(note interface{}) *Visitor_VisitNote_Call {
	return &Visitor_VisitNote_Call{Call: _e.mock.On("VisitNote", note)}
}

func (_c *Visitor_VisitNote_Call) Run(run func(note *models.Note)) *Visitor_VisitNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Note))
	})
	return _c
}

func (_c *Visitor_VisitNote_Call) Return(_a0 error) *Visitor_VisitNote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Visitor_VisitNote_Call) RunAndReturn(run func(*models.Note) error) *Visitor_VisitNote_Call {
	_c.Call.Return(run)
	return _c
}

// NewVisitor creates a new instance of Visitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVisitor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Visitor {
	mock := &Visitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
