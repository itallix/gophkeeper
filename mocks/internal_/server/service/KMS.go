// Code generated by mockery v2.46.3. DO NOT EDIT.

package service

import mock "github.com/stretchr/testify/mock"

// KMS is an autogenerated mock type for the KMS type
type KMS struct {
	mock.Mock
}

type KMS_Expecter struct {
	mock *mock.Mock
}

func (_m *KMS) EXPECT() *KMS_Expecter {
	return &KMS_Expecter{mock: &_m.Mock}
}

// DecryptDataKey provides a mock function with given fields: encryptedDataKey
func (_m *KMS) DecryptDataKey(encryptedDataKey []byte) ([]byte, error) {
	ret := _m.Called(encryptedDataKey)

	if len(ret) == 0 {
		panic("no return value specified for DecryptDataKey")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(encryptedDataKey)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(encryptedDataKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(encryptedDataKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KMS_DecryptDataKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecryptDataKey'
type KMS_DecryptDataKey_Call struct {
	*mock.Call
}

// DecryptDataKey is a helper method to define mock.On call
//   - encryptedDataKey []byte
func (_e *KMS_Expecter) DecryptDataKey(encryptedDataKey interface{}) *KMS_DecryptDataKey_Call {
	return &KMS_DecryptDataKey_Call{Call: _e.mock.On("DecryptDataKey", encryptedDataKey)}
}

func (_c *KMS_DecryptDataKey_Call) Run(run func(encryptedDataKey []byte)) *KMS_DecryptDataKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *KMS_DecryptDataKey_Call) Return(_a0 []byte, _a1 error) *KMS_DecryptDataKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KMS_DecryptDataKey_Call) RunAndReturn(run func([]byte) ([]byte, error)) *KMS_DecryptDataKey_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateDataKey provides a mock function with given fields:
func (_m *KMS) GenerateDataKey() ([]byte, []byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateDataKey")
	}

	var r0 []byte
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func() ([]byte, []byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() []byte); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// KMS_GenerateDataKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateDataKey'
type KMS_GenerateDataKey_Call struct {
	*mock.Call
}

// GenerateDataKey is a helper method to define mock.On call
func (_e *KMS_Expecter) GenerateDataKey() *KMS_GenerateDataKey_Call {
	return &KMS_GenerateDataKey_Call{Call: _e.mock.On("GenerateDataKey")}
}

func (_c *KMS_GenerateDataKey_Call) Run(run func()) *KMS_GenerateDataKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KMS_GenerateDataKey_Call) Return(_a0 []byte, _a1 []byte, _a2 error) *KMS_GenerateDataKey_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *KMS_GenerateDataKey_Call) RunAndReturn(run func() ([]byte, []byte, error)) *KMS_GenerateDataKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewKMS creates a new instance of KMS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKMS(t interface {
	mock.TestingT
	Cleanup(func())
}) *KMS {
	mock := &KMS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
