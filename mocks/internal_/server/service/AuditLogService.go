// Code generated by mockery v2.46.3. DO NOT EDIT.

package service

import (
	mock "github.com/stretchr/testify/mock"
	service "gophkeeper.com/internal/server/service"

	time "time"
)

// AuditLogService is an autogenerated mock type for the AuditLogService type
type AuditLogService struct {
	mock.Mock
}

type AuditLogService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuditLogService) EXPECT() *AuditLogService_Expecter {
	return &AuditLogService_Expecter{mock: &_m.Mock}
}

// GetLogs provides a mock function with given fields: startTime, endTime
func (_m *AuditLogService) GetLogs(startTime time.Time, endTime time.Time) ([]service.AuditLog, error) {
	ret := _m.Called(startTime, endTime)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 []service.AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) ([]service.AuditLog, error)); ok {
		return rf(startTime, endTime)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time) []service.AuditLog); ok {
		r0 = rf(startTime, endTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time) error); ok {
		r1 = rf(startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuditLogService_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type AuditLogService_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - startTime time.Time
//   - endTime time.Time
func (_e *AuditLogService_Expecter) GetLogs(startTime interface{}, endTime interface{}) *AuditLogService_GetLogs_Call {
	return &AuditLogService_GetLogs_Call{Call: _e.mock.On("GetLogs", startTime, endTime)}
}

func (_c *AuditLogService_GetLogs_Call) Run(run func(startTime time.Time, endTime time.Time)) *AuditLogService_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(time.Time))
	})
	return _c
}

func (_c *AuditLogService_GetLogs_Call) Return(_a0 []service.AuditLog, _a1 error) *AuditLogService_GetLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuditLogService_GetLogs_Call) RunAndReturn(run func(time.Time, time.Time) ([]service.AuditLog, error)) *AuditLogService_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with given fields: user, operation, path, success
func (_m *AuditLogService) Log(user string, operation string, path string, success bool) error {
	ret := _m.Called(user, operation, path, success)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool) error); ok {
		r0 = rf(user, operation, path, success)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuditLogService_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type AuditLogService_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - user string
//   - operation string
//   - path string
//   - success bool
func (_e *AuditLogService_Expecter) Log(user interface{}, operation interface{}, path interface{}, success interface{}) *AuditLogService_Log_Call {
	return &AuditLogService_Log_Call{Call: _e.mock.On("Log", user, operation, path, success)}
}

func (_c *AuditLogService_Log_Call) Run(run func(user string, operation string, path string, success bool)) *AuditLogService_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *AuditLogService_Log_Call) Return(_a0 error) *AuditLogService_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditLogService_Log_Call) RunAndReturn(run func(string, string, string, bool) error) *AuditLogService_Log_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuditLogService creates a new instance of AuditLogService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditLogService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditLogService {
	mock := &AuditLogService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
