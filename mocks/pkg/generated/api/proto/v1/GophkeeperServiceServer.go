// Code generated by mockery v2.46.3. DO NOT EDIT.

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "gophkeeper.com/pkg/generated/api/proto/v1"
)

// GophkeeperServiceServer is an autogenerated mock type for the GophkeeperServiceServer type
type GophkeeperServiceServer struct {
	mock.Mock
}

type GophkeeperServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *GophkeeperServiceServer) EXPECT() *GophkeeperServiceServer_Expecter {
	return &GophkeeperServiceServer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *GophkeeperServiceServer) Create(_a0 context.Context, _a1 *v1.CreateRequest) (*v1.CreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateRequest) (*v1.CreateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateRequest) *v1.CreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type GophkeeperServiceServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.CreateRequest
func (_e *GophkeeperServiceServer_Expecter) Create(_a0 interface{}, _a1 interface{}) *GophkeeperServiceServer_Create_Call {
	return &GophkeeperServiceServer_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *GophkeeperServiceServer_Create_Call) Run(run func(_a0 context.Context, _a1 *v1.CreateRequest)) *GophkeeperServiceServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.CreateRequest))
	})
	return _c
}

func (_c *GophkeeperServiceServer_Create_Call) Return(_a0 *v1.CreateResponse, _a1 error) *GophkeeperServiceServer_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceServer_Create_Call) RunAndReturn(run func(context.Context, *v1.CreateRequest) (*v1.CreateResponse, error)) *GophkeeperServiceServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *GophkeeperServiceServer) Delete(_a0 context.Context, _a1 *v1.DeleteRequest) (*v1.DeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1.DeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DeleteRequest) (*v1.DeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DeleteRequest) *v1.DeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type GophkeeperServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.DeleteRequest
func (_e *GophkeeperServiceServer_Expecter) Delete(_a0 interface{}, _a1 interface{}) *GophkeeperServiceServer_Delete_Call {
	return &GophkeeperServiceServer_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *GophkeeperServiceServer_Delete_Call) Run(run func(_a0 context.Context, _a1 *v1.DeleteRequest)) *GophkeeperServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.DeleteRequest))
	})
	return _c
}

func (_c *GophkeeperServiceServer_Delete_Call) Return(_a0 *v1.DeleteResponse, _a1 error) *GophkeeperServiceServer_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceServer_Delete_Call) RunAndReturn(run func(context.Context, *v1.DeleteRequest) (*v1.DeleteResponse, error)) *GophkeeperServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function with given fields: _a0, _a1
func (_m *GophkeeperServiceServer) Download(_a0 *v1.DownloadRequest, _a1 grpc.ServerStreamingServer[v1.Chunk]) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.DownloadRequest, grpc.ServerStreamingServer[v1.Chunk]) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GophkeeperServiceServer_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type GophkeeperServiceServer_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - _a0 *v1.DownloadRequest
//   - _a1 grpc.ServerStreamingServer[v1.Chunk]
func (_e *GophkeeperServiceServer_Expecter) Download(_a0 interface{}, _a1 interface{}) *GophkeeperServiceServer_Download_Call {
	return &GophkeeperServiceServer_Download_Call{Call: _e.mock.On("Download", _a0, _a1)}
}

func (_c *GophkeeperServiceServer_Download_Call) Run(run func(_a0 *v1.DownloadRequest, _a1 grpc.ServerStreamingServer[v1.Chunk])) *GophkeeperServiceServer_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.DownloadRequest), args[1].(grpc.ServerStreamingServer[v1.Chunk]))
	})
	return _c
}

func (_c *GophkeeperServiceServer_Download_Call) Return(_a0 error) *GophkeeperServiceServer_Download_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GophkeeperServiceServer_Download_Call) RunAndReturn(run func(*v1.DownloadRequest, grpc.ServerStreamingServer[v1.Chunk]) error) *GophkeeperServiceServer_Download_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *GophkeeperServiceServer) Get(_a0 context.Context, _a1 *v1.GetRequest) (*v1.GetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetRequest) (*v1.GetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetRequest) *v1.GetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type GophkeeperServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.GetRequest
func (_e *GophkeeperServiceServer_Expecter) Get(_a0 interface{}, _a1 interface{}) *GophkeeperServiceServer_Get_Call {
	return &GophkeeperServiceServer_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *GophkeeperServiceServer_Get_Call) Run(run func(_a0 context.Context, _a1 *v1.GetRequest)) *GophkeeperServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.GetRequest))
	})
	return _c
}

func (_c *GophkeeperServiceServer_Get_Call) Return(_a0 *v1.GetResponse, _a1 error) *GophkeeperServiceServer_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceServer_Get_Call) RunAndReturn(run func(context.Context, *v1.GetRequest) (*v1.GetResponse, error)) *GophkeeperServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *GophkeeperServiceServer) List(_a0 context.Context, _a1 *v1.ListRequest) (*v1.ListResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v1.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListRequest) (*v1.ListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListRequest) *v1.ListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type GophkeeperServiceServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.ListRequest
func (_e *GophkeeperServiceServer_Expecter) List(_a0 interface{}, _a1 interface{}) *GophkeeperServiceServer_List_Call {
	return &GophkeeperServiceServer_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *GophkeeperServiceServer_List_Call) Run(run func(_a0 context.Context, _a1 *v1.ListRequest)) *GophkeeperServiceServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.ListRequest))
	})
	return _c
}

func (_c *GophkeeperServiceServer_List_Call) Return(_a0 *v1.ListResponse, _a1 error) *GophkeeperServiceServer_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceServer_List_Call) RunAndReturn(run func(context.Context, *v1.ListRequest) (*v1.ListResponse, error)) *GophkeeperServiceServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *GophkeeperServiceServer) Login(_a0 context.Context, _a1 *v1.LoginRequest) (*v1.AuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *v1.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.LoginRequest) (*v1.AuthResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.LoginRequest) *v1.AuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceServer_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type GophkeeperServiceServer_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.LoginRequest
func (_e *GophkeeperServiceServer_Expecter) Login(_a0 interface{}, _a1 interface{}) *GophkeeperServiceServer_Login_Call {
	return &GophkeeperServiceServer_Login_Call{Call: _e.mock.On("Login", _a0, _a1)}
}

func (_c *GophkeeperServiceServer_Login_Call) Run(run func(_a0 context.Context, _a1 *v1.LoginRequest)) *GophkeeperServiceServer_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.LoginRequest))
	})
	return _c
}

func (_c *GophkeeperServiceServer_Login_Call) Return(_a0 *v1.AuthResponse, _a1 error) *GophkeeperServiceServer_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceServer_Login_Call) RunAndReturn(run func(context.Context, *v1.LoginRequest) (*v1.AuthResponse, error)) *GophkeeperServiceServer_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: _a0, _a1
func (_m *GophkeeperServiceServer) RefreshToken(_a0 context.Context, _a1 *v1.RefreshTokenRequest) (*v1.AuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *v1.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RefreshTokenRequest) (*v1.AuthResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RefreshTokenRequest) *v1.AuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.RefreshTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceServer_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type GophkeeperServiceServer_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.RefreshTokenRequest
func (_e *GophkeeperServiceServer_Expecter) RefreshToken(_a0 interface{}, _a1 interface{}) *GophkeeperServiceServer_RefreshToken_Call {
	return &GophkeeperServiceServer_RefreshToken_Call{Call: _e.mock.On("RefreshToken", _a0, _a1)}
}

func (_c *GophkeeperServiceServer_RefreshToken_Call) Run(run func(_a0 context.Context, _a1 *v1.RefreshTokenRequest)) *GophkeeperServiceServer_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.RefreshTokenRequest))
	})
	return _c
}

func (_c *GophkeeperServiceServer_RefreshToken_Call) Return(_a0 *v1.AuthResponse, _a1 error) *GophkeeperServiceServer_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceServer_RefreshToken_Call) RunAndReturn(run func(context.Context, *v1.RefreshTokenRequest) (*v1.AuthResponse, error)) *GophkeeperServiceServer_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *GophkeeperServiceServer) Register(_a0 context.Context, _a1 *v1.RegisterRequest) (*v1.AuthResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *v1.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RegisterRequest) (*v1.AuthResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RegisterRequest) *v1.AuthResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.RegisterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceServer_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type GophkeeperServiceServer_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1.RegisterRequest
func (_e *GophkeeperServiceServer_Expecter) Register(_a0 interface{}, _a1 interface{}) *GophkeeperServiceServer_Register_Call {
	return &GophkeeperServiceServer_Register_Call{Call: _e.mock.On("Register", _a0, _a1)}
}

func (_c *GophkeeperServiceServer_Register_Call) Run(run func(_a0 context.Context, _a1 *v1.RegisterRequest)) *GophkeeperServiceServer_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.RegisterRequest))
	})
	return _c
}

func (_c *GophkeeperServiceServer_Register_Call) Return(_a0 *v1.AuthResponse, _a1 error) *GophkeeperServiceServer_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceServer_Register_Call) RunAndReturn(run func(context.Context, *v1.RegisterRequest) (*v1.AuthResponse, error)) *GophkeeperServiceServer_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: _a0
func (_m *GophkeeperServiceServer) Upload(_a0 grpc.ClientStreamingServer[v1.Chunk, v1.UploadResponse]) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(grpc.ClientStreamingServer[v1.Chunk, v1.UploadResponse]) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GophkeeperServiceServer_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type GophkeeperServiceServer_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - _a0 grpc.ClientStreamingServer[v1.Chunk,v1.UploadResponse]
func (_e *GophkeeperServiceServer_Expecter) Upload(_a0 interface{}) *GophkeeperServiceServer_Upload_Call {
	return &GophkeeperServiceServer_Upload_Call{Call: _e.mock.On("Upload", _a0)}
}

func (_c *GophkeeperServiceServer_Upload_Call) Run(run func(_a0 grpc.ClientStreamingServer[v1.Chunk, v1.UploadResponse])) *GophkeeperServiceServer_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(grpc.ClientStreamingServer[v1.Chunk, v1.UploadResponse]))
	})
	return _c
}

func (_c *GophkeeperServiceServer_Upload_Call) Return(_a0 error) *GophkeeperServiceServer_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GophkeeperServiceServer_Upload_Call) RunAndReturn(run func(grpc.ClientStreamingServer[v1.Chunk, v1.UploadResponse]) error) *GophkeeperServiceServer_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedGophkeeperServiceServer provides a mock function with given fields:
func (_m *GophkeeperServiceServer) mustEmbedUnimplementedGophkeeperServiceServer() {
	_m.Called()
}

// GophkeeperServiceServer_mustEmbedUnimplementedGophkeeperServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedGophkeeperServiceServer'
type GophkeeperServiceServer_mustEmbedUnimplementedGophkeeperServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedGophkeeperServiceServer is a helper method to define mock.On call
func (_e *GophkeeperServiceServer_Expecter) mustEmbedUnimplementedGophkeeperServiceServer() *GophkeeperServiceServer_mustEmbedUnimplementedGophkeeperServiceServer_Call {
	return &GophkeeperServiceServer_mustEmbedUnimplementedGophkeeperServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedGophkeeperServiceServer")}
}

func (_c *GophkeeperServiceServer_mustEmbedUnimplementedGophkeeperServiceServer_Call) Run(run func()) *GophkeeperServiceServer_mustEmbedUnimplementedGophkeeperServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GophkeeperServiceServer_mustEmbedUnimplementedGophkeeperServiceServer_Call) Return() *GophkeeperServiceServer_mustEmbedUnimplementedGophkeeperServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *GophkeeperServiceServer_mustEmbedUnimplementedGophkeeperServiceServer_Call) RunAndReturn(run func()) *GophkeeperServiceServer_mustEmbedUnimplementedGophkeeperServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewGophkeeperServiceServer creates a new instance of GophkeeperServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGophkeeperServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *GophkeeperServiceServer {
	mock := &GophkeeperServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
