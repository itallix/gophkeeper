// Code generated by mockery v2.46.3. DO NOT EDIT.

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "gophkeeper.com/pkg/generated/api/proto/v1"
)

// GophkeeperServiceClient is an autogenerated mock type for the GophkeeperServiceClient type
type GophkeeperServiceClient struct {
	mock.Mock
}

type GophkeeperServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GophkeeperServiceClient) EXPECT() *GophkeeperServiceClient_Expecter {
	return &GophkeeperServiceClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *GophkeeperServiceClient) Create(ctx context.Context, in *v1.CreateRequest, opts ...grpc.CallOption) (*v1.CreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateRequest, ...grpc.CallOption) (*v1.CreateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CreateRequest, ...grpc.CallOption) *v1.CreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CreateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type GophkeeperServiceClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.CreateRequest
//   - opts ...grpc.CallOption
func (_e *GophkeeperServiceClient_Expecter) Create(ctx interface{}, in interface{}, opts ...interface{}) *GophkeeperServiceClient_Create_Call {
	return &GophkeeperServiceClient_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophkeeperServiceClient_Create_Call) Run(run func(ctx context.Context, in *v1.CreateRequest, opts ...grpc.CallOption)) *GophkeeperServiceClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.CreateRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophkeeperServiceClient_Create_Call) Return(_a0 *v1.CreateResponse, _a1 error) *GophkeeperServiceClient_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceClient_Create_Call) RunAndReturn(run func(context.Context, *v1.CreateRequest, ...grpc.CallOption) (*v1.CreateResponse, error)) *GophkeeperServiceClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *GophkeeperServiceClient) Delete(ctx context.Context, in *v1.DeleteRequest, opts ...grpc.CallOption) (*v1.DeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1.DeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DeleteRequest, ...grpc.CallOption) (*v1.DeleteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DeleteRequest, ...grpc.CallOption) *v1.DeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.DeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type GophkeeperServiceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.DeleteRequest
//   - opts ...grpc.CallOption
func (_e *GophkeeperServiceClient_Expecter) Delete(ctx interface{}, in interface{}, opts ...interface{}) *GophkeeperServiceClient_Delete_Call {
	return &GophkeeperServiceClient_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophkeeperServiceClient_Delete_Call) Run(run func(ctx context.Context, in *v1.DeleteRequest, opts ...grpc.CallOption)) *GophkeeperServiceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.DeleteRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophkeeperServiceClient_Delete_Call) Return(_a0 *v1.DeleteResponse, _a1 error) *GophkeeperServiceClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceClient_Delete_Call) RunAndReturn(run func(context.Context, *v1.DeleteRequest, ...grpc.CallOption) (*v1.DeleteResponse, error)) *GophkeeperServiceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function with given fields: ctx, in, opts
func (_m *GophkeeperServiceClient) Download(ctx context.Context, in *v1.DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[v1.Chunk], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 grpc.ServerStreamingClient[v1.Chunk]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DownloadRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[v1.Chunk], error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.DownloadRequest, ...grpc.CallOption) grpc.ServerStreamingClient[v1.Chunk]); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[v1.Chunk])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.DownloadRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceClient_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type GophkeeperServiceClient_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.DownloadRequest
//   - opts ...grpc.CallOption
func (_e *GophkeeperServiceClient_Expecter) Download(ctx interface{}, in interface{}, opts ...interface{}) *GophkeeperServiceClient_Download_Call {
	return &GophkeeperServiceClient_Download_Call{Call: _e.mock.On("Download",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophkeeperServiceClient_Download_Call) Run(run func(ctx context.Context, in *v1.DownloadRequest, opts ...grpc.CallOption)) *GophkeeperServiceClient_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.DownloadRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophkeeperServiceClient_Download_Call) Return(_a0 grpc.ServerStreamingClient[v1.Chunk], _a1 error) *GophkeeperServiceClient_Download_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceClient_Download_Call) RunAndReturn(run func(context.Context, *v1.DownloadRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[v1.Chunk], error)) *GophkeeperServiceClient_Download_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *GophkeeperServiceClient) Get(ctx context.Context, in *v1.GetRequest, opts ...grpc.CallOption) (*v1.GetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.GetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetRequest, ...grpc.CallOption) (*v1.GetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetRequest, ...grpc.CallOption) *v1.GetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type GophkeeperServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.GetRequest
//   - opts ...grpc.CallOption
func (_e *GophkeeperServiceClient_Expecter) Get(ctx interface{}, in interface{}, opts ...interface{}) *GophkeeperServiceClient_Get_Call {
	return &GophkeeperServiceClient_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophkeeperServiceClient_Get_Call) Run(run func(ctx context.Context, in *v1.GetRequest, opts ...grpc.CallOption)) *GophkeeperServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.GetRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophkeeperServiceClient_Get_Call) Return(_a0 *v1.GetResponse, _a1 error) *GophkeeperServiceClient_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceClient_Get_Call) RunAndReturn(run func(context.Context, *v1.GetRequest, ...grpc.CallOption) (*v1.GetResponse, error)) *GophkeeperServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, in, opts
func (_m *GophkeeperServiceClient) List(ctx context.Context, in *v1.ListRequest, opts ...grpc.CallOption) (*v1.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *v1.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListRequest, ...grpc.CallOption) (*v1.ListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListRequest, ...grpc.CallOption) *v1.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type GophkeeperServiceClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.ListRequest
//   - opts ...grpc.CallOption
func (_e *GophkeeperServiceClient_Expecter) List(ctx interface{}, in interface{}, opts ...interface{}) *GophkeeperServiceClient_List_Call {
	return &GophkeeperServiceClient_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophkeeperServiceClient_List_Call) Run(run func(ctx context.Context, in *v1.ListRequest, opts ...grpc.CallOption)) *GophkeeperServiceClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.ListRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophkeeperServiceClient_List_Call) Return(_a0 *v1.ListResponse, _a1 error) *GophkeeperServiceClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceClient_List_Call) RunAndReturn(run func(context.Context, *v1.ListRequest, ...grpc.CallOption) (*v1.ListResponse, error)) *GophkeeperServiceClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, in, opts
func (_m *GophkeeperServiceClient) Login(ctx context.Context, in *v1.LoginRequest, opts ...grpc.CallOption) (*v1.AuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *v1.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.LoginRequest, ...grpc.CallOption) (*v1.AuthResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.LoginRequest, ...grpc.CallOption) *v1.AuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.LoginRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceClient_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type GophkeeperServiceClient_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.LoginRequest
//   - opts ...grpc.CallOption
func (_e *GophkeeperServiceClient_Expecter) Login(ctx interface{}, in interface{}, opts ...interface{}) *GophkeeperServiceClient_Login_Call {
	return &GophkeeperServiceClient_Login_Call{Call: _e.mock.On("Login",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophkeeperServiceClient_Login_Call) Run(run func(ctx context.Context, in *v1.LoginRequest, opts ...grpc.CallOption)) *GophkeeperServiceClient_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.LoginRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophkeeperServiceClient_Login_Call) Return(_a0 *v1.AuthResponse, _a1 error) *GophkeeperServiceClient_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceClient_Login_Call) RunAndReturn(run func(context.Context, *v1.LoginRequest, ...grpc.CallOption) (*v1.AuthResponse, error)) *GophkeeperServiceClient_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, in, opts
func (_m *GophkeeperServiceClient) RefreshToken(ctx context.Context, in *v1.RefreshTokenRequest, opts ...grpc.CallOption) (*v1.AuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *v1.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RefreshTokenRequest, ...grpc.CallOption) (*v1.AuthResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RefreshTokenRequest, ...grpc.CallOption) *v1.AuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.RefreshTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceClient_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type GophkeeperServiceClient_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.RefreshTokenRequest
//   - opts ...grpc.CallOption
func (_e *GophkeeperServiceClient_Expecter) RefreshToken(ctx interface{}, in interface{}, opts ...interface{}) *GophkeeperServiceClient_RefreshToken_Call {
	return &GophkeeperServiceClient_RefreshToken_Call{Call: _e.mock.On("RefreshToken",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophkeeperServiceClient_RefreshToken_Call) Run(run func(ctx context.Context, in *v1.RefreshTokenRequest, opts ...grpc.CallOption)) *GophkeeperServiceClient_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.RefreshTokenRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophkeeperServiceClient_RefreshToken_Call) Return(_a0 *v1.AuthResponse, _a1 error) *GophkeeperServiceClient_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceClient_RefreshToken_Call) RunAndReturn(run func(context.Context, *v1.RefreshTokenRequest, ...grpc.CallOption) (*v1.AuthResponse, error)) *GophkeeperServiceClient_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, in, opts
func (_m *GophkeeperServiceClient) Register(ctx context.Context, in *v1.RegisterRequest, opts ...grpc.CallOption) (*v1.AuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *v1.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RegisterRequest, ...grpc.CallOption) (*v1.AuthResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.RegisterRequest, ...grpc.CallOption) *v1.AuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.RegisterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceClient_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type GophkeeperServiceClient_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.RegisterRequest
//   - opts ...grpc.CallOption
func (_e *GophkeeperServiceClient_Expecter) Register(ctx interface{}, in interface{}, opts ...interface{}) *GophkeeperServiceClient_Register_Call {
	return &GophkeeperServiceClient_Register_Call{Call: _e.mock.On("Register",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GophkeeperServiceClient_Register_Call) Run(run func(ctx context.Context, in *v1.RegisterRequest, opts ...grpc.CallOption)) *GophkeeperServiceClient_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.RegisterRequest), variadicArgs...)
	})
	return _c
}

func (_c *GophkeeperServiceClient_Register_Call) Return(_a0 *v1.AuthResponse, _a1 error) *GophkeeperServiceClient_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceClient_Register_Call) RunAndReturn(run func(context.Context, *v1.RegisterRequest, ...grpc.CallOption) (*v1.AuthResponse, error)) *GophkeeperServiceClient_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: ctx, opts
func (_m *GophkeeperServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[v1.Chunk, v1.UploadResponse], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 grpc.ClientStreamingClient[v1.Chunk, v1.UploadResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (grpc.ClientStreamingClient[v1.Chunk, v1.UploadResponse], error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) grpc.ClientStreamingClient[v1.Chunk, v1.UploadResponse]); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ClientStreamingClient[v1.Chunk, v1.UploadResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GophkeeperServiceClient_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type GophkeeperServiceClient_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *GophkeeperServiceClient_Expecter) Upload(ctx interface{}, opts ...interface{}) *GophkeeperServiceClient_Upload_Call {
	return &GophkeeperServiceClient_Upload_Call{Call: _e.mock.On("Upload",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *GophkeeperServiceClient_Upload_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *GophkeeperServiceClient_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *GophkeeperServiceClient_Upload_Call) Return(_a0 grpc.ClientStreamingClient[v1.Chunk, v1.UploadResponse], _a1 error) *GophkeeperServiceClient_Upload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GophkeeperServiceClient_Upload_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (grpc.ClientStreamingClient[v1.Chunk, v1.UploadResponse], error)) *GophkeeperServiceClient_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewGophkeeperServiceClient creates a new instance of GophkeeperServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGophkeeperServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *GophkeeperServiceClient {
	mock := &GophkeeperServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
